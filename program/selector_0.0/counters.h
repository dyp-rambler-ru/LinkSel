#pragma once
#include <Arduino.h>

#define T_DELAY  200  // время основного цикла микроконтроллера в мс, должно быть менее секунды, но более 50 мс ( пустой цикл до 23 мс, при посылке ping 40 мс)
#define CountersN 8   // количество разных видов счетчиков 
 
enum  TNameCounters { Any = 0,  Tping = 1,   LockSwitch = 2, returnA = 3,  press3s = 4, oneMin = 5, timeOutWeb = 6, SyncTimeSrv = 7   };     // названия счетчиков, CountX - неиспользуемый счетчик
 /* 
 Tping - период посылки ping
 LockSwitch -  задержка перед переключением обратно на прежний канал ( чтоб не было частых переключений когда оба канала неисправны) 
 returnA - период возврата на канал а
 press3s -  счетчик для определения длительности нажатия кнопки ( больше 3 секунд)
 oneMin - счетчик на минуту для учета времени работы
 timeOutWeb - максимальное время обслуживания соединения с клиентом - 1 сек - 5 циклов по 200 мс. за это количество циклов должен быть до конца получен запрос, сформирован и отправлен ответ клиенту
 SyncTimeSrv - период синхронизации с тайм сервером 
*/


 // структура для хранения данных счетчиков, время задается в тактах контроллера
 struct TCountersA {
          long int counter [ CountersN ];   // массив текущих значений счетчиков , используется -1, нельзя использовать беззнаковый тип
          // массив  стартовых значений счетчиков, задает время работы счетчика в тактах ! микроконтроллера, константа в виде Х / T_DELAY, где Х - желаемое время задержки в мс, используется -1, нельзя использовать беззнаковый тип          
          long int maxCounter[ CountersN ] = { 0,    60000 / T_DELAY,     60000 / T_DELAY,     60000 / T_DELAY,    60000 / T_DELAY,     60000 / T_DELAY,     60000 / T_DELAY,    60000 / T_DELAY  };   
                                               //  максимальное значение задержки 2147483647 , при такте 200 мс, задержка до 4900 суток
      };
     
 class TCounters {
    
  public:
 TCounters();                               // конструктор
 void cycleAll();                           	 // уменьшение всех работающих счетчиков 
 void resetAll(); 		                         // сброс всех работавших счетчиков
 void reset( TNameCounters i );     // сброс счетчика
 void start( TNameCounters i );      // старт счетчика
 bool isOn( TNameCounters i );      // проверка запущен ли уже счетчик
 bool isOver( TNameCounters i );    // проверка отсчитал ли счетчик заданное количество раз и достиг -1, true - если счетчик уже сработал
 void load(  TNameCounters i, long int t);        // установка нового предельного значения t для счетчика name, t - в мсек
        
 private:
 TCountersA CountersA; 
};

// -------------------------------------------------------------------------------------------------------------------------------------
static TCounters counters = TCounters();  